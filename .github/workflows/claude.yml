name: Claude Code

on:
  issue_comment:
    types: [created, edited]
  pull_request_review_comment:
    types: [created, edited]
  issues:
    types: [opened, assigned, edited]
  pull_request_review:
    types: [submitted, edited]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: self-hosted
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read

    steps:
      - name: Prepare Claude Context
        id: context
        run: |
          # Determine issue or PR number
          if [ "${{ github.event_name }}" == "issues" ]; then
            echo "NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "TYPE=issue" >> $GITHUB_OUTPUT
            echo "BODY=${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "TYPE=issue" >> $GITHUB_OUTPUT
            echo "BODY=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            echo "NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "TYPE=pr" >> $GITHUB_OUTPUT
            echo "BODY=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            echo "NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "TYPE=pr" >> $GITHUB_OUTPUT
            echo "BODY=${{ github.event.review.body }}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Claude Branch Info
        id: claude-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.context.outputs.TYPE }}-${{ steps.context.outputs.NUMBER }}-claude"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Check if branch exists remotely using authenticated URL
          if git ls-remote --heads https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "BRANCH_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Branch $BRANCH_NAME exists remotely"
          else
            echo "BRANCH_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Branch $BRANCH_NAME does not exist, will be created"
          fi

      - name: Checkout Main Repository
        uses: actions/checkout@v5
        with:
          path: "repo"

      - name: Checkout Claude Branch
        uses: actions/checkout@v5
        with:
          path: "claude"
          ref: ${{ steps.claude-branch.outputs.BRANCH_EXISTS == 'true' && steps.claude-branch.outputs.BRANCH_NAME || null }}

      - name: Setup Branch and Symlink
        run: |
          # Configure git in claude directory
          cd "$GITHUB_WORKSPACE/claude"

          # Create branch if it doesn't exist
          if [ "${{ steps.claude-branch.outputs.BRANCH_EXISTS }}" == "false" ]; then
            git checkout -b "${{ steps.claude-branch.outputs.BRANCH_NAME }}"
            echo "Created new branch ${{ steps.claude-branch.outputs.BRANCH_NAME }}"
          fi

          # Create symlink for Claude projects (points to claude directory)
          CLAUDE_PWD="$GITHUB_WORKSPACE/claude/claude"
          mkdir -p $CLAUDE_PWD

          mkdir -p "$HOME/.claude/projects"
          ln -sf "$CLAUDE_PWD" "$HOME/.claude/projects/-repo"
          echo "Symlink created: $HOME/.claude/projects/-repo -> $CLAUDE_PWD"

          # Create symlink from /repo to main checkout for easy access
          ln -sf "$GITHUB_WORKSPACE/repo" /repo
          echo "Symlink created: /repo -> $GITHUB_WORKSPACE/repo"

      - name: Run Claude Code
        id: claude_run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.context.outputs.NUMBER }}
          ISSUE_TYPE: ${{ steps.context.outputs.TYPE }}
        run: |
          # Change to main repo directory (via symlink)
          cd /repo

          # Load system prompt
          SYSTEM_PROMPT=$(cat .github/claude-system-prompt.md)

          # Get the user's request (remove @claude mention and clean up)
          USER_REQUEST=$(echo "${{ steps.context.outputs.BODY }}" | sed 's/@claude//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Create simple prompt with just the essentials
          PROMPT="You are working on $ISSUE_TYPE #$ISSUE_NUMBER in repository ${{ github.repository }}.

          User request: $USER_REQUEST"

          claude \
            --continue \
            --print \
            --system-prompt "$SYSTEM_PROMPT" \
            --dangerously-skip-permissions \
            "$PROMPT" \
            2>&1 | tee /tmp/claude_output.txt

      - name: Commit and Push Changes
        run: |
          cd "$GITHUB_WORKSPACE/claude"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if [[ -n $(git status -s) ]]; then
            git add .
            git commit -m "Claude Code: ${{ steps.context.outputs.TYPE }} #${{ steps.context.outputs.NUMBER }}"
            git push origin "${{ steps.claude-branch.outputs.BRANCH_NAME }}"
            echo "Changes committed and pushed to branch ${{ steps.claude-branch.outputs.BRANCH_NAME }}"
          else
            echo "No changes to commit"
          fi

      - name: Post Claude Response as Comment
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CLAUDE_OUTPUT=$(cat /tmp/claude_output.txt)          # Post as comment on issue or PR
          if [ "${{ steps.context.outputs.TYPE }}" == "issue" ]; then
            gh issue comment ${{ steps.context.outputs.NUMBER }} --body "$CLAUDE_OUTPUT"
          else
            gh pr comment ${{ steps.context.outputs.NUMBER }} --body "$CLAUDE_OUTPUT"
          fi
