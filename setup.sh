#!/bin/bash
set -e

echo "================================================"
echo "  SDLC - Claude Code Infrastructure Setup"
echo "================================================"
echo ""

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${YELLOW}Error: Docker is not installed.${NC}"
    echo "Please install Docker first: https://docs.docker.com/get-docker/"
    exit 1
fi

echo -e "${BLUE}✓ Docker found${NC}"

# Check if docker-compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo -e "${YELLOW}Warning: docker-compose is not installed.${NC}"
    echo "You'll need it to run the runners. Install it from: https://docs.docker.com/compose/install/"
    echo ""
    read -p "Continue anyway? (y/n): " CONTINUE
    if [[ ! $CONTINUE =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo -e "${BLUE}✓ docker-compose found${NC}"
fi

echo ""

# Build Claude Code container
echo "================================================"
echo "  Building Claude Code Container"
echo "================================================"
echo ""
echo -e "${BLUE}Building sdlc-claude:latest...${NC}"
docker build -t sdlc-claude:latest -f Dockerfile .

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}✓ Claude Code container built successfully!${NC}"
else
    echo -e "${YELLOW}✗ Failed to build Claude Code container${NC}"
    exit 1
fi

echo ""
echo "================================================"
echo "  Creating Runner Configuration"
echo "================================================"
echo ""

# Create .env file in runner directory
if [ ! -f "runner/.env" ]; then
    echo -e "${BLUE}Let's configure your GitHub Actions runners...${NC}"
    echo ""
    
    # Prompt for GitHub Token
    echo -e "${YELLOW}1. GitHub Personal Access Token${NC}"
    echo "   Create one at: https://github.com/settings/tokens"
    echo "   Required scopes: repo (Full control of private repositories)"
    echo ""
    
    while true; do
        read -s -p "   Enter your GitHub token (ghp_...): " GITHUB_TOKEN
        echo ""
        
        if [ -z "$GITHUB_TOKEN" ]; then
            echo -e "${YELLOW}   Error: Token cannot be empty${NC}"
            continue
        fi
        
        if [[ ! $GITHUB_TOKEN =~ ^(ghp_|github_pat_) ]]; then
            echo -e "${YELLOW}   Warning: Token should start with 'ghp_' or 'github_pat_'${NC}"
            read -p "   Continue anyway? (y/n): " CONTINUE
            if [[ $CONTINUE =~ ^[Yy]$ ]]; then
                break
            fi
        else
            break
        fi
    done
    
    echo ""
    
    # Prompt for Repository
    echo -e "${YELLOW}2. GitHub Repository${NC}"
    echo "   Format: owner/repo-name (e.g., octocat/hello-world)"
    echo ""
    
    while true; do
        read -p "   Enter your repository: " GITHUB_REPOSITORY
        
        if [ -z "$GITHUB_REPOSITORY" ]; then
            echo -e "${YELLOW}   Error: Repository cannot be empty${NC}"
            continue
        fi
        
        if [[ ! $GITHUB_REPOSITORY =~ ^[^/]+/[^/]+$ ]]; then
            echo -e "${YELLOW}   Error: Repository must be in format 'owner/repo-name'${NC}"
            continue
        fi
        
        break
    done
    
    echo ""
    
    # Prompt for Runner Prefix (optional)
    echo -e "${YELLOW}3. Runner Name Prefix (optional)${NC}"
    echo "   Runners will be named: {prefix}-gh-runner-1, {prefix}-gh-runner-2, etc."
    echo "   Leave empty for default naming (gh-runner-1, gh-runner-2, etc.)"
    echo ""
    read -p "   Enter prefix (or press Enter to skip): " RUNNER_PREFIX
    
    echo ""
    echo -e "${BLUE}Creating runner/.env file...${NC}"
    
    # Create .env file with provided values
    cat > runner/.env << EOF
# GitHub Actions Runner Configuration
# Generated by setup.sh

# Required: Your GitHub Personal Access Token with repo access (admin write on repo needed)
GITHUB_TOKEN=$GITHUB_TOKEN

# Required: Repository in format owner/repo-name
GITHUB_REPOSITORY=$GITHUB_REPOSITORY

# Optional: Prefix for runner names (default: none)
# Runners will be named: {prefix}-gh-runner-1, {prefix}-gh-runner-2, etc.
RUNNER_PREFIX=$RUNNER_PREFIX
EOF
    
    echo -e "${GREEN}✓ Created runner/.env file with your configuration${NC}"
else
    echo -e "${YELLOW}runner/.env already exists - skipping creation${NC}"
    echo "If you want to reconfigure, delete runner/.env and run setup again"
fi

echo ""
echo "================================================"
echo "  Setup Complete!"
echo "================================================"
echo ""
echo -e "${GREEN}✓ Docker image 'sdlc-claude:latest' is ready${NC}"
echo -e "${GREEN}✓ Runner configuration file created${NC}"
echo ""
echo "================================================"
echo "  Next Steps"
echo "================================================"
echo ""
echo "1. Configure GitHub Secret (in repository settings):"
echo "   Go to: Settings → Secrets and variables → Actions"
echo "   - CLAUDE_CODE_OAUTH_TOKEN: Your Claude Code OAuth token"
echo ""
echo "2. Start the self-hosted GitHub Actions runners:"
echo ""
echo -e "   ${BLUE}cd runner${NC}"
echo -e "   ${BLUE}docker-compose up -d${NC}"
echo ""
echo "3. Verify runners are registered:"
echo "   Go to: Settings → Actions → Runners"
echo "   You should see 5 runners online"
echo ""
echo "4. Test the workflow:"
echo "   - Create an issue in your repository"
echo "   - Mention @claude in the issue description or comments"
echo "   - Claude will respond and work on your request"
echo ""
echo "================================================"
echo ""
